# =========================================
# = Configurações da Aplicação =
# =========================================
# Porta para comunicação no Servidor Web:
spring.application.name = app
# =========================================
# = Configurações do Servidor Web =
# =========================================
# Porta para comunicação no Servidor Web:
server.port = 8080
# =========================================
# = Configurações JPA / HIBERNATE =
# =========================================
# Apresentar log das consultas SQL:
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
# Hibernate ddl auto (create, create-drop, validate, update):
# "create":
# Cria o esquema. Remove dados prévios. O Hibernate primeiro descarta
# as tabelas existentes e cria novas tabelas.
#
# "create-drop":
# Cria o esquema. Remove o esquema ao final da sessão. Semelhante a
# create, mas o Hibernate removerá o banco de dados depois que todas
# as operações forem concluídas. Normalmente usado para teste unitário.
#
# "validate":
# Valida o esquema, não altera o banco. O Hibernate só valida se as
# tabelas e colunas existem. Caso contrário, lança uma exceção.
#
# "update":
# Atualiza o esquema. O esquema do banco de dados será automaticamente
# atualizado de acordo com as entidades Java encontradas no projeto.
# Exemplo: inclui novas tabelas, colunas e constraints, mas não remove
# tabelas, colunas e constraints que já não fazem mais parte do esquema.
#
# "none":
# Desativa a DDL (Data Definition Language).
#
# OBS: para evitar a perda de dados, usar a opção update.
spring.jpa.hibernate.ddl-auto = create
# Estratégia para a criação de nomes:
spring.jpa.hibernate.naming.physical-strategy =
org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# O dialeto SQL faz com que o Hibernate gere melhores SQL's para o
# Sistema Gerenciador de Banco de Dados escolhido:
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
# =========================================
# = DATA SOURCE =
# = Configurações para conexão com o =
# = banco de dados em memória H2. =
# =========================================
# URL de conexão com o banco "empresadb":
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.url = jdbc:h2:mem:empresadb
# Username and password:
spring.datasource.username = sa
spring.datasource.password =
# Mantém a conecção aberta se o sistema ficar inativo por muito tempo
# (necessário em produção):
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
# =========================================
# = H2 CLIENT =
# = Configurações para conexão com o =
# = cliente do banco de dados em memória =
# = H2. =
# =========================================
spring.h2.console.enabled = true
spring.h2.console.path = /h2-console
